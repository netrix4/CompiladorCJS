
struct currentValidID{
    int year;
    char branch[6];
    int totalVoters;
};
typedef struct candidate{
    int cid;
    char cname[20];
    int votes;
}CANDIDATE;

//GLOBALS --------------------------------------------------------
struct currentValidID currentValidID; //stores current Valid user ID parameters
CANDIDATE candidateArray[20]; //to store information all candidates
int numberOfCandidates; //Total number of candidates standing for election
char studentVotes[200]; //to store information of votes given by each student
//----------------------------------------------------------------

//To extract year from userID -- For example, userID:2018btecs00064 year:2018 
int extractYear(char userID[15])
{
    int year=0;
    char tmp;
    for(int i=0;i<4;i++){
        tmp=userID[i];
		year=(year*10)+(tmp-48);
    }
    return year;
}

int extractRollNo(char userID[15])
{
    int rollno=0;
    char tmp;
    for(int i=9;i<14;i++){
        tmp=userID[i];
		rollno=(rollno*10)+(tmp-48);
    }
    return rollno;
}

//Will check whether the global branch code and inputed branch code is matching or not
int checkBranchCode(char userID[15])
{
    char branchCode[6];
    for(int i=4;i<9;i++){
        branchCode[i-4]=userID[i];
    }
    branchCode[5]=0;
    if(strcmp(branchCode,currentValidID.branch)==0)
        return 1;
    else
        return 0;
}

int authenticateAdmin(){
    char username[15], password[6];
    
    printf();
    scanf();
    if((strcmp(username))!=0)
        return 0;
    else
    {
        printf();
        int i=0;
        for(i=0;i<5;i++)
        {
            password[i]=getch();
            printf();
        }
        password[i]=;
        if((strcmp(password,))!=0)
            return 0;
    }
    return 1;
}

void banID(){
    printf();
    FILE *fp=fopen();
    if(fp==NULL){
        printf();
        fclose(fp);
        return;
    }
    printf();
    int input;
    while(1){
        printf();
        scanf();
        if(input==0)
            break;
        studentVotes[input-1];
        fprintf();
    }
    fclose(fp);
    printf();
}

void createCandidateFiles(){
    printf();
    FILE *fp;
	char filename[20];
    for(int i = 1;i <= numberOfCandidates; i++){
        sprintf();
		fp=fopen(filename);
        fprintf();
		fclose(fp);
    }
    printf();
}

void deleteIllegalVote(char userID[15])
{
    FILE *fp,*fcp;
    char filename[20];
    char line[20];

    int location = extractRollNo(userID);
    sprintf();
    candidateArray[studentVotes[location-1]-49].votes--;
    studentVotes[location-1]=0;
    if ((fp = fopen()) == NULL)    
    {    
        printf();
        return;
    }
    printf();    
    if ((fcp = fopen()) == NULL)    
    {    
        printf();
        return;
    }
    
    while (!feof(fp))
    {
        fscanf();
        fprintf();
    }
    fclose(fp);
    fclose(fcp);
    if ((fp = fopen()) == NULL)    
    {    
        printf();
        return;
    }
    int numFromFile;
    char cnameFromFile[20];
    fcp = fopen();  
    fscanf();
    fprintf();
    fscanf();
    fprintf();
    while(!feof(fcp)){
        fscanf();
        if(numFromFile!=location)
            fprintf();
    }
    fclose(fp);
    fclose(fcp);
    remove();
    printf();
    getch();
}

int getWinner(){
    int maxV = -1;
    int winnerCid;
    for(int i = 0;i < numberOfCandidates; i++){
        if(candidateArray[i].votes > maxV) {
            winnerCid = candidateArray[i].cid;
            maxV = candidateArray[i].votes;      
        }
        else if(candidateArray[i].votes == maxV) {
            return -1;
        }
    }
    return winnerCid;
}

void initiateNewElection()
{
    printf();
    
    printf();
    scanf();
    printf();
    scanf();
    printf();
    scanf();
    printf();
    scanf();

   for (int i = 0; i < currentValidID.totalVoters; i++)
    {
        studentVotes[i] = 0;
    }

    for (int i = 0;i < numberOfCandidates; i++)
    {
        candidateArray[i].cid=i+1;
        printf();
        scanf();
        candidateArray[i].votes=0;
    }
    return;
}

void saveElectionInfoInFile(){
    printf();
    FILE *fp = fopen();
    if(fp==NULL)
    {
        printf();
        fclose(fp);
        return;
    }
    fprintf(
        currentValidID.year,
        currentValidID.branch,
        currentValidID.totalVoters,
        numberOfCandidates
    );
    fclose(fp);
    printf();
}

void loadElectionInfoFromFile()
{
    FILE *f1,*f2,*f3;
    f1=fopen();
    if(f1==NULL)
        printf();
    fscanf();
    fseek();
    fscanf();
    fseek();
    fscanf();
    fseek();
    fscanf();
    fclose();
   
    //load candidates info and student votes
    for (int i = 0; i < currentValidID.totalVoters; i++)
    {
        studentVotes[i] = 0;
    }
    for(int i=1;i<=numberOfCandidates;i++)
    {
        int location;
        char filename[20];
        sprintf();
        f2=fopen();
        candidateArray[i-1].cid=i;
        fscanf();
        fscanf();
        while(!feof(f2)){
            fscanf();
            studentVotes[location-1] = i+48;
        }
        fclose(f2);
    }

    //load banned votes
    int location;
    f3=fopen();
    while(!feof(f3)){
        fscanf();
        studentVotes[location-1] = 0;
    }
    fclose(f3);
    
}

void adminPanel()
{
    while(1){
        
        if(authenticateAdmin()!=1){
            printf();
            break;
        }

        printf();
		getch();

        while(1)
        {
            char inputID[15];
            char input;char banInp;
            int WinnerCid, totalVotedNow=0;
            printf();
			      scanf();

            switch(input)
            {
                case 1:
                    initiateNewElection();
                    saveElectionInfoInFile();
                    createCandidateFiles();
                    break;
                case 2:
                    loadElectionInfoFromFile();
                    break;
                case 3:
                    printf();
                    scanf();
                    deleteIllegalVote(inputID);
                    break;
                case 4:
                    printf();
                    scanf();
                    if(banInp==1){
                        banID();
                    }
                    break;
                case 5:
                    WinnerCid = getWinner();
                    if(WinnerCid != -1){
                        printf();
                    }
                    else{
                        printf();
                    }
                    printf();
                    for(int i=0;i<numberOfCandidates;i++){
                        totalVotedNow+=candidateArray[i].votes;
                        printf();
                    }
                    printf();
                    break;
                case 6:
                    return;
                default:
                    printf();
					getch();
            }
			
        }
    }

};


int isValid(char userID[15])
{
    if(strlen(userID)!=14)
        return 0;
    
    int inputedYear=extractYear(userID);
    int inputedRollNo = extractRollNo(userID);
    
    if(inputedYear!=currentValidID.year || checkBranchCode(userID)!=1 || inputedRollNo>currentValidID.totalVoters)
        return 0;

    return 1;
}

int isVoted(char userID[15])
{
    int location=extractRollNo(userID);
    if(studentVotes[location-1]==0)
        return 0;
    else
        return 1;
}

int isBanned(char userID[15]){
    int location=extractRollNo(userID);
    if(studentVotes[location-1]==0)
        return 1;
    else
        return 0;
}

void saveVote(char userID[15],char voteInput)
{
    char filename[20];
    sprintf();
    FILE *fp = fopen(filename);
    int location=extractRollNo(userID);
    studentVotes[location-1]=voteInput;
    candidateArray[voteInput-49].votes++;
    fseek();
    fprintf();
    fseek();
    fprintf();
    fclose(fp);
}


void studentPanel()
{
    char userID[15];
    char voteInput;
    while(1)
	{
		printf();
        printf();
        scanf();
        if(strcmp(userID, 0)==0)
				return;
        if(isValid(userID)!=1)
        {
            printf();
            getch();
            continue;
        }
        if(isBanned(userID)!=0)
        {
            printf();
            getch();
            continue;
        }
        if(isVoted(userID)!=0)
        {
            printf();
            getch();
            continue;
        }
        printf();
		for (int i = 0; i < numberOfCandidates; i++)
        {
            printf();
        }
        printf();
        voteInput=getch();
        printf();
        if(voteInput-48 < 1 || voteInput-48 > numberOfCandidates)
        {
            printf();
            getch();
            continue;
        }
        saveVote(userID,voteInput);
        printf();
        getch();
    }
};